name: Lambdas CD

on:
  workflow_run:
    workflows:
      - Lambdas CI
    types:
      - completed
    branches:
      - data_landscape_migration

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    permissions:
      contents: read

    steps:
      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEV__LAMBDA_UPDATER__AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV__LAMBDA_UPDATER__AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV__AWS_REGION }}

      - name: Download lambda template from S3
        env:
          S3_BUCKET: ${{ secrets.DEV__LAMBDA_ARTIFACTS_S3_BUCKET }}
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          aws s3 cp "s3://${S3_BUCKET}/${COMMIT_SHA}/template.yaml" template.yaml
          echo "Lambda template downloaded from S3."

      - name: Deploy Lambdas from S3
        env:
          RESOURCE_PREFIX: ${{ secrets.DEV__AWS_RESOURCE_BASE }}
          S3_BUCKET: ${{ secrets.DEV__LAMBDA_ARTIFACTS_S3_BUCKET }}
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          echo "Deploying artifacts from commit SHA: ${COMMIT_SHA}"

          functions=$(yq '(.Resources | to_entries | .[] | select(.value.Type == "AWS::Serverless::Function")).key' template.yaml)

          for function_logical_id in $functions; do
            function_name=$(yq ".Resources.${function_logical_id}.Properties.FunctionName" template.yaml)
            function_handler=$(yq ".Resources.${function_logical_id}.Properties.Handler" template.yaml)
            function_runtime=$(yq ".Resources.${function_logical_id}.Properties.Runtime" template.yaml)
            function_memory_size=$(yq ".Resources.${function_logical_id}.Properties.MemorySize" template.yaml)
            function_timeout=$(yq ".Resources.${function_logical_id}.Properties.Timeout" template.yaml)
            zip_file_name="${RESOURCE_PREFIX}-${function_name}.zip"
            s3_key="${COMMIT_SHA}/${zip_file_name}"

            echo "---"
            echo "Updating function $function_name code..."

            aws lambda update-function-code \
              --function-name "${RESOURCE_PREFIX}-${function_name}" \
              --s3-bucket "$S3_BUCKET" \
              --s3-key "$s3_key"

            echo "Waiting for function ${function_name} code update to complete..."
            aws lambda wait function-updated \
              --function-name "${RESOURCE_PREFIX}-${function_name}"

            echo "Updating function ${function_name} configuration..."
            aws lambda update-function-configuration \
              --function-name "${RESOURCE_PREFIX}-${function_name}" \
              --handler "$function_handler" \
              --runtime "$function_runtime" \
              --memory-size "$function_memory_size" \
              --timeout "$function_timeout"

            echo "Waiting for function ${function_name} configuration update to complete..."
            aws lambda wait function-updated \
              --function-name "${RESOURCE_PREFIX}-${function_name}"

            echo "Function ${function_name} updated."

          done
          echo "---"
          echo "All function updates are complete."